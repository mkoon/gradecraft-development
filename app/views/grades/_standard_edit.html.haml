.small-12.columns(ng-app="gradecraft")
  = csrf_meta_tag

  - if @assignment.accepts_submissions? && @student.submission_for_assignment(@assignment).present?
    .panel

      %h4.uppercase= "#{@student.first_name}'s Submission"
      = render 'submissions/instructor_data'

  = simple_form_for @grade, url: assignment_grade_path(@assignment), method: :patch do |f|
    = hidden_field_tag :student_id, current_student.id

    #grade(ng-controller="GradeCtrl" ng-init="init(#{@serialized_grade}, #{@serialized_score_levels})")

      .panel.splash(ng-cloak) Loading grade for #{@student.name}...


      .panel(ng-cloak)
        - if @assignment_score_levels.count > 0 # use this longhand method to save a request
          .small-12.medium-4.columns
            = f.label :raw_score, "Raw Score (#{@assignment.point_total} points Possible)"
            %select#grade_raw_score(name="grade[raw_score]" ng-model="grade.raw_score" ng-change="grade.update()" ng-disabled="grade.is_custom_value")
              %option(value="{{scoreLevel.value}}" ng-repeat="scoreLevel in assignmentScoreLevels" ng-selected="grade.rawScore == scoreLevel.value") {{scoreLevel.name}} ({{scoreLevel.formatted_value}} points)

          .small-12.medium-2.columns
            %label#custom-value-label(for="grade_raw_score" ng-click="grade.toggleCustomValue()")
              Custom Value
              = image_tag "/assets/lock-blue-locked-sm.png"
            = f.text_field :raw_score,
              default: @assignment.point_total,
              label: "Score",
              hint: "Total Assignment Points: #{ points @assignment.point_total }",
              "ng-model" => "grade.raw_score",
              "ng-change" => "grade.update()",
              "ng-model-options" => "grade.modelOptions()",
              "ng-disabled" => "! grade.is_custom_value",
              "placeholder" => "Enter raw score for grade",
              "smart-number" => "",
              "smart-number-options" => "{ maxDigits: 9, preventInvalidInput: true }"

        - else
          .small-12.medium-4.columns
            = f.label :raw_score, "Raw Score (#{@assignment.point_total} points Possible)"
            = f.text_field :raw_score,
              default: @assignment.point_total,
              label: "Score",
              hint: "Total Assignment Points: #{ points @assignment.point_total }",
              "ng-model" => "grade.raw_score",
              "ng-change" => "grade.update()",
              "ng-model-options" => "grade.modelOptions()",
              "placeholder" => "Enter raw score for grade",
              "smart-number" => "",
              "smart-number-options" => "{ maxDigits: 9, preventInvalidInput: true }"


            -#data: {autonumeric: true, "m-dec" => "0", "v-max" => "999999999"},

        - if @assignment.release_necessary?
          .small-12.large-4.columns
            .input.select.optional.grade_status
              %label.select.optional(for="grade_status") Status
              %select.select.optional(name="grade[status]" id="grade_status" ng-model="grade.status" ng-change="grade.update()")
                %option(value="{{grade_status}}" ng-repeat="grade_status in gradeStatuses" ng-selected="grade_status == grade.status") {{grade_status}}

            .form_label Can the student see this grade?
        - elsif @grade.status.blank?
          = f.hidden_field :status, value: 'Graded'

        .small-12.columns
          = f.hidden_field :graded_by_id, :value => current_user.id
          = f.label :feedback
          = f.text_area :feedback,
            "froala" => "froalaOptions",
            "ng-change" => "grade.update()",
            "ng-model" => "grade.feedback",
            "ng-model-options" => "{ debounce: 1000 }"
        .clear

      .panel(ng-cloak)
        = render partial: "standard_edit_attachment", locals: {f: f}

    .button-bar
      %ul.button-group.radius.right
        %li= submit_tag "#{@grade.persisted? && @grade.is_graded? ? 'Update' : 'Submit'} Grade", :class => "button"
        %li= link_to 'Cancel', assignment_path(@assignment), :class => 'button'
